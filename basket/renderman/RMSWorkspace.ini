#
# RMSWorkspace.ini $Revision: #1 $
#  shared initialization state between RMS applications
#  governing workspace initialization. Separated from RMS.ini
#  to enable overriding of the basic workspace behavior policies.
#  Primarily depends upon the value of RMSProductionModel.
#

## WSSubdir. - each item matching WSSubdir.* is considered
#   an abstract resource directory reference.  These
#   references can be used in tcl scripts to refer to
#   various RMS file types. Relative references are
#   assumed to be rooted at RMSPROJ.
#
SetPref WSSubdir.rfmImages      {frames/$SEQ/$SHOT/cg}
SetPref WSSubdir.rfmData        {renderman/$STAGE/data}
SetPref WSSubdir.rfmSwap        {renderman/$STAGE/swap}
SetPref WSSubdir.rfmShaders     {renderman/$STAGE/shaders}
SetPref WSSubdir.rfmTextures    {renderman/textures}
SetPref WSSubdir.rfmRIBArchives {renderman/ribarchives}
SetPref WSSubdir.rfmRIBs        {renderman/$STAGE/rib}
SetPref WSSubdir.slimShaders    {slim/shaders/$STAGE}
SetPref WSSubdir.slimPalettes   {slim/palettes}
SetPref WSSubdir.slimSessions   {slim/sessions}
SetPref WSSubdir.slimTextures   {renderman/textures}
SetPref WSSubdir.slimTmps       {slim/tmp}
SetPref WSSubdir.itSession      itsession
SetPref WSSubdir.itLUTDir       luts
SetPref WSSubdir.itCatalog      itsession/catalog

# legacy settings for mtor (previously located in TOR.ini)
SetPref WSSubdir.torRIBs        rib
SetPref WSSubdir.torImgs        rmanpix
SetPref WSSubdir.torTmps        rmantmp
SetPref WSSubdir.torShaders     rmanshader
SetPref WSSubdir.torTextures    rmantex
SetPref WSSubdir.torShadows     rmantex/shd
SetPref WSSubdir.torReflections rmantex/env

## SiteScriptingVars:
#   a list of variable names that your site may use for asset referencing
SetPref SiteScriptingVars {TESTVAR1 TESTVAR2}

## SiteEnvVars:
#   a list of environment variable names that your site may wish to expose
#   to RMS scripting...
SetPref SiteEnvVars {SEQ SHOT}

SetPref SessionFileName {$FILEBASE}; 
    # controls the session naming.  The value of FILEBASE causes the
    # Slim session to be intextricably tied to the slim client session file.
    # To share a session across a larger context, change this to, 
    #  e.g., ProjectSession
SetPref SessionCheckpointName \
            {$FILEBASE.[clock format [clock seconds] -format %Y%m%d-%H%M%S]}

# stdplaces:
# \\\${VAR} causes the variable-deference to occur in the RIB parser at 
#     rendertime, rather than at RIB-gen time.
# \${VAR} causes the substitution to occur at RIB-gen time. 
#
switch -exact -- [GetPref RMSProductionModel] {
  ProjWithinProd {
    set stdplaces [list \\\${RMSPROJ} \\\${RMSPROJ_SHARING} \
                        \\\${RMSPROD} \\\${RMSPROD_GLOBAL}]
  }
  ProjEqualsProd {
    set stdplaces [list \\\${RMSPROJ}]
  }
  default {
    error "Unknown production model: [GetPref RMSProductionModel]"
  }
}

# Default searchpaths.
#   the @ represents the renderman defaults for 
#       /standardshaderpath, /standardtexturepath, 
#   and are established in $RMANTREE/etc/rendermn.ini.
# Searchpaths can be specified by resource type to avoid unnecessarily
# broad searches.  The following searchpaths will be editable in the 
# workspace editor.  If the searchpath for a resource type is empty the 
# default local or server searchpath will be used instead.  
# If the searchpath for a resource type is not empty it entirely 
# replaces the default local or server searchpath.
#
SetPref WSSearchPaths [concat $stdplaces @]
SetPref WSSearchPaths.palette {} ; # used by Slim

# RenderMan searchpaths
SetPref WSSearchPaths.display [list \\\${RMSTREE}/bin @]
SetPref WSSearchPaths.procedural \
    [list \\\${RMSTREE}/lib/plugins \\\${RMANTREE}/etc @]
SetPref WSSearchPaths.archive [concat $stdplaces .]
SetPref WSSearchPaths.shader \
    [concat $stdplaces [list \\\${RMSTREE}/lib/shaders/ @]]
SetPref WSSearchPaths.texture \
    [concat $stdplaces [list \\\${RMSTREE}/lib/textures/ @]]
SetPref WSSearchPaths.rifilter  \
    [list \\\${RMANTREE}/etc @]
SetPref WSSearchPaths.rixplugin [list \\\${RMSTREE}/lib/shaders/ @]

if 0 {
    # These paths service a deprecated netrender feature
    SetPref WSServerSearchPaths.serverarchive {}
    SetPref WSServerSearchPaths.serverdisplay {}
    SetPref WSServerSearchPaths.serverprocedural \
        [list \\\${RMSTREE}/lib/plugins \\\${RMANTREE}/etc @]
    SetPref WSServerSearchPaths.servershader \
        [concat $stdplaces [list \\\${RMSTREE}/lib/shaders/ @]]
    SetPref WSServerSearchPaths.servertexture \
        [concat $stdplaces [list \\\${RMSTREE}/lib/textures/ @]]
}

# Directory mappings must each be associated with a zone.
# The WSDirmapZoneList pref sets the list of possible zones
# to choose from (the list becomes available as an option menu
# when a dirmap is added in the Workspace Editor).
# The default zones (NFS and UNC) are network file systems.  
# Generally, all unices will be NFS, while NT would be UNC.
# File systems are just one possible zoning scheme...
# eg. SetPref WSDirMaps {{X:/ /fileserver NFS} {/fileserver X:/ UNC}}
SetPref WSDirMaps {}
SetPref WSDirmapZoneList {NFS UNC}


# ---------------------------------------------------------------------------
# Asset names can be generated by RMSExpression.tcl's AssetRef command.
# Assets are categorized by class and potentially overridden by unique id,
# often passid.  We wish to describe the naming patterns of output files:
#   * file extensions associated with each file type/class
#   * locations of each file by type/class
#   * naming patterns for each file by type/class
#  We need a flexible, concise means to specify the precise
#  layout of files to ensure that their origination and purpose
#  is clear.
#
#  We first provide this information to RMS apps through four
#  preferences, allowing sites to establish local policies through
#  standard RMS .ini overrides (see docs on RMS_SCRIPT_PATHS).
#  In this file we employ local variables to build up the final form of 
#  our tables.  Our goal is to make this file easily read and maintained. 
#  Sites who wish to extend or modify these tables can do something like 
#  this in their site-specific RMSWorkspace.ini:
#       array set mylocal [GetPref AssetnameExtTable]
#       set mylocal(newtype) $newext
#       SetPref AssetnameExtTable [array get mylocal]
#
#
array set outclassTab {
    data        {[workspace GetDir rfmData]/$FRAME/$ASSETNAME}
    image       {[workspace GetDir rfmImages]/$ASSETNAME}
    rib         {[workspace GetDir rfmRIBs]/$FRAME/$ASSETNAME}
    shader      {[workspace GetDir rfmShaders]/$ASSETNAME}
    texture     {[workspace GetDir rfmTextures]/$FRAME/$ASSETNAME}
    jobtexture  {[workspace GetDir rfmTextures]/job/$ASSETNAME}
    ribarchive  {[workspace GetDir rfmRIBArchives]/$ASSETNAME}
    ribzip      {[workspace GetDir rfmRIBArchives]/$ASSETNAME}
}

set assetnamePatternTab(passhandle) \
    {${CAMERA}${CAMERAFLAVOR}_${PASSCLASS}_${FLAVOR}_${CREW}}

set assetnamePatternTab(_default) \
    {${BASE}_${LAYER}_${PASSID}_${DSPYID}.${FRAME}.${EXT}}
    # used to produce ASSETNAME, referenced e.g. above

set assetnamePatternTab(_primary) \
    {${BASE}_${LAYER}_${PASSID}.${FRAME}.${EXT}}

set assetnamePatternTab(_mapname) \
    {${BASE}_${LAYER}_${PASSID}_${MAPNAME}.${FRAME}.${EXT}}

# Many passes have a single output.  Here the passclass can be
# used to control the output directory as well as the file extension.
# Some passes have several outputs of different types. This case
# is trickier, relying on .e.g. per-dspy information.
foreach  {filetype ext outclass specialpattern} {
    alias alias image       {}
    cineon cin image        {}
    file {} image           {}
    iceman {} image         {}
    mayaiff iff image       {}
    openexr exr image       {}
    sgif sgi image          {}
    softimage pic image     {}
    targa tga image         {}
    tiff tif image          {}

    image {} image          {}
    it {} image             {}
    internal {} image       {}
    imultires {} image       {}

    texture tex texture       {${HANDLE}.${EXT}}
    jobtexture tex jobtexture {${HANDLE}.${EXT}}

    deepshad dtex data      {}
    shadow tex data         {}
    null {} data            {}
    data {} data            {}

    shadersrc sl shader     {${HANDLE}.${EXT}}
    shader slo shader       {${HANDLE}.${EXT}}
    rishader {} shader      {${HANDLE}}

    rib rib rib             {${HANDLE}_${LAYER}.${FRAME}${FF}.${EXT}}
    ribdriver rib rib       {${FRAME}_${LAYER}.${EXT}}
    ribarchive rib ribarchive  {${HANDLE}/${HANDLE}.${FRAME}${FF}.${EXT}}
    ribzip rib ribzip       {${HANDLE}.${EXT}}
    tmprib rib data         {${HANDLE}_${LAYER}.${FRAME}${FF}.${EXT}}

    rmanstat xml rib        {${PASSID}.${FRAME}.${EXT}}

    fur fur data            {${HANDLE}.${FRAME}${FF}.${EXT}}
    painteffects pfx data   {${HANDLE}.${FRAME}${FF}.${EXT}}

    Bake tex data           {${PASSID}_${OBJNAME}_${BAKECHAN}.${FRAME}.${EXT}}
    BakeRender ptc data     {${PASSID}_${OBJNAME}.${FRAME}.${EXT}}
    DeepShadow dtex data    _primary
    AreaShadow dtex data    _primary
    Environment tex data    {}
    EnvMap tex data         {}
    EnvCube tex data        {}
    EnvRender tex data      {}
    EnvPx tex data          {}
    EnvNx tex data          {}
    EnvPy tex data          {}
    EnvNy tex data          {}
    EnvPz tex data          {}
    EnvNz tex data          {}
    Denoise {} image        _primary
    DenoiseCrossFrame {} image _primary
    Final {} image          _primary
    FinalDenoise {} image          _primary
    Preview {} image        _primary
    Rerender {} image       _primary
    RerenderRIS {} image    _primary
    ReyesRerender {} image  _primary
    RIS {} image            _primary
    PartialFilterApproxGlobalDiffuse ptc data {}
    FilterApproxGlobalDiffuse ptc data {}
    MakeFilterApproxGlobalDiffuse bkm data {}
    MakeApproxGlobalDiffuse bkm data {}
    MakeGlobalDiffuse3d bkm data {}
    MinMaxShadow tex data   {}
    Reference tex data      {}
    ReferenceRender {} data {}
    Reflection tex data     {}
    RenderApproxGlobalDiffuse ptc data {}
    RenderCaustic ptc data {}
    RenderGlobalDiffuse3d ptc data {} 
    RenderRadiosity ptc data {}
    Shadow tex data         {}
    SSRender ptc data       {_mapname}
    SSOrganize ptc data     {_mapname}
    SSDiffuse ptc data      {_mapname}
    SSMakeBrickmap bkm data {_mapname}
    SBRender ptc data       {_mapname}
    SBPtRender tex data     {_mapname}
    SBMakePtCloud ptc data  {_mapname}
    SBMakePtex ptx data     {_mapname}
    SBMakeBrickmap bkm data {_mapname}
    TxMake tex texture      {}
    ScatterVolumeRender ptc data {}
    VolumeScatter ptc data  {}

} {
    # register output class and optional special-case name patterns
    if {$specialpattern ne ""} {
        if [string match _* $specialpattern] {
            # indirect through the table
            set assetnamePatternTab($filetype) \
                    $assetnamePatternTab($specialpattern)
            
        } else {
            # update the table
            set assetnamePatternTab($filetype) $specialpattern
        }
    }
    set assetLocTab($filetype) $outclassTab($outclass)
    set assetExtTab($filetype) $ext
}   

# The Assetname preferences ---------------------------------------
SetPref AssetnameFullpaths 0
SetPref AssetnameFrameFormat {$F4}
    # A default format for FRAME... May be overridden by the
    # job-wide settings obtained from Render Globals. To prevent
    # user override, you can use the standard RMS LockPref command.
SetPref AssetnameExtTable [array get assetExtTab]
    # The AssetnameExtTable is a map of file class/id to file extensions.
    # The extension from this map is substituted into the $EXT variable
    # when a file name is requested. Requests either come directly
    # from the RMSExpression scripting framework or via the torattrs 
    # called passNameFormat and passExtFormat. Typically, the $EXT var 
    # is used in the passExtFormat.
SetPref AssetnamePatternTable [array get assetnamePatternTab]
    # The AssetnamePatternTable maps a filetype to the template pattern
    # used to generate the value for ASSETNAME, which is used in
    # most entries in the AssetLocTable.
SetPref AssetLocTable [array get assetLocTab]
    # The AssetLocTable maps a class/id key to an expression that
    # produces a pathname.
SetPref AssetnameInvalidCharMap \
    { : _ ? _ | _ ; _ < _ > _ [ "" ] "" \{ "" \} ""}
    # a table used to clean illegal or undersirable
    # characters from assetnames. It is a list of pairs, the
    # first char will be mapped to the second. Set the second
    # char to "" to delete the first from the result.
SetPref AssetnameSimplifyRegexp \
    {^_|_$|_{1,}(?=\.)|_{1,}(?=_)|\.{1,}(?=\.)|\.{1,}$}
    # a regexp pattern that can be used to simplify assetnames.
    #   ^_:  a leading _ 
    #   _$: trailing _
    #   _{1,}(?=\.)}: 1 or more '_' followed by .
    #   _{1,}(?=_):  1 or more '_' followed by _ 
    #   \.{1,}(?=\.):  1 or more . followed by .
    #   \.{1,}$: one or more trailing . 
SetPref AssetnameDefeatOverrides 0
    # Usually, we support SCENE-local overrides of the naming patterns
    # embodied here.  Set this to 1 to prevent local overrides.

SetPref FrameNumberRegexp {(?:.*[^0-9])?([0-9]+)}
    # a regexp pattern used to find the frame number in file names
    # found on disk. The pattern is expected to return just one atom, the
    # frame number. 
    # (?:.*[^0-9])? match every thing from the start of the name up to the last
    #               string of digits or nothing. Also don't report this match
    #               which is the meaning of ?:
    # ([0-9]+)      match the frame number string.
